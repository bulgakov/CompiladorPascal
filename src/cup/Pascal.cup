package compiladorpascal;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import ast.*;
import table.ErrorMsg;

/* Inicializacion  */
parser code {: 
    private List<ErrorMsg> errors = new ArrayList<ErrorMsg>();
    
    @Override
    public void report_error(String message, Object info) {       
        /* Alt error print */
        /*
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol)
	    if (((Symbol)info).left != -1)
	        System.err.println(" at line " + ((Symbol)info).left +
                                   " of input");
	    else System.err.println("");
        else System.err.println("");
        */
        /*
        System.out.println(message+" at");
        if ( info instanceof ComplexSymbolFactory.ComplexSymbol )
            System.out.println(info);
        else 
            System.err.println("Error : " + message);
        */
        StringBuilder err = new StringBuilder();
        err.append(message);
        err.append(" Expected: ");
        List<Integer> expected = expected_token_ids();
        int added = 0;
        for (Integer i : expected) {
            err.append(symbl_name_from_id(i));
            added++;
            if (added < expected.size()) {
                err.append(", ");
            }
        }
        if (info != null && info instanceof ComplexSymbolFactory.ComplexSymbol)
            errors.add(new ErrorMsg(((ComplexSymbolFactory.ComplexSymbol)info).xleft.getLine(), ((ComplexSymbolFactory.ComplexSymbol)info).xleft.getColumn(), err.toString()));
        else
            errors.add(new ErrorMsg(0, 0, err.toString()));
    }

    @Override
    public void syntax_error(Symbol symbol) {
        //report_error("Syntax error", symbol);
        String error_msg = "Syntax error on ["
                + ((symbol.sym == sym.error || symbol.sym == sym.IDENTIFIER)
                        ? symbol.value.toString()
                        : symbl_name_from_id(symbol.sym))
                + "]";
        report_error(error_msg, symbol);
    }
    
    public List<ErrorMsg> getErrors() { 
        return errors;
    }

    public boolean error() { 
        return errors.size() > 0;
    }
:};

/* Terminales */
terminal WRITE;
terminal READ;

terminal DOT;
terminal COMMA;
terminal SEMICOLON;
terminal COLON;
terminal LPAREN;
terminal RPAREN;

/* procedimientos y funciones */
terminal PROGRAM;
terminal PROCEDURE;
terminal FUNCTION;
terminal BEGIN;
terminal END;
terminal VAR;
terminal TYPE;
terminal RECORD;


/* secuencias de control e iteradores */
terminal IF;
terminal THEN;
terminal ELSE;
terminal FOR;
terminal TO;
terminal DO;
terminal WHILE;
terminal REPEAT;
terminal UNTIL;

/* Tipos */
terminal CHAR, INTEGER, BOOLEAN;

/* Operadores */
terminal String ASSIGN;     // :=
terminal String EQ;         // =
terminal String NEQ;        // <>
terminal String LT;         // <
terminal String GT;         // >
terminal String LE;         // <=
terminal String GE;         // >=
terminal String PLUS;       // +
terminal String MINUS;      // -
terminal String MULT;       // *
terminal String SLASH;      // /
terminal String DIV;        //div
terminal String MOD;        //mod
terminal String AND;        //and
terminal String OR;         //or
terminal NOT;               //not

/* literales */
terminal FALSE, TRUE;
terminal String  IDENTIFIER;
terminal String  STRING_LITERAL;
terminal String  CHAR_LITERAL;
terminal Integer INTEGER_LITERAL;

/* No-Terminales */
non terminal Program prog;
non terminal IdentifierList arguments;
non terminal IdentifierList argument_list;
non terminal IdentifierList identifier_list;
non terminal Block block;
non terminal Declarations declarations;
non terminal Declaration declaration;
non terminal TypeDeclaration type_declaration;
non terminal TypeDefinitions type_definitions;
non terminal TypeDefinition type_definition;
non terminal FieldList record_type;
non terminal FieldList record_body;
non terminal FieldList field_list;
non terminal VariableDeclaration variable_declaration;
non terminal VariableDefinitions variable_definitions;
non terminal VariableDefinitions variable_definition;
non terminal ProcedureDeclaration procedure_declaration;
non terminal ProcedureDeclaration function_declaration;
non terminal ParameterDefinitions formal_parameters;
non terminal ParameterDefinitions parameter_defs;
non terminal ParameterDefinitions parameter_def;
non terminal Statements statements;
non terminal Statement statement;
non terminal WriteStatement write_statement;
non terminal Expression opt_parameter;
non terminal Statements compound_statement;
non terminal Statement empty_statement;
non terminal ReadStatement read_statement;
non terminal AssignStatement assign_statement;
non terminal ProcedureStatement procedure_statement;
non terminal IfStatement if_statement;
non terminal WhileStatement while_statement;
non terminal RepeatStatement repeat_statement;
non terminal ForStatement for_statement;
non terminal Parameters parameter_list;
non terminal Parameters opt_parameters;
non terminal Parameters parameters;
non terminal String OPLOG;      // and or
non terminal String OPREL;      // = <> < <= > >=
non terminal String OPSUM;      // + -
non terminal String OPMULT;     // * / mod div
non terminal Expression expression;
non terminal Expression relation;
non terminal Expression simple_expression;
non terminal Expression term;
non terminal Expression factor;
non terminal Expression primary;
non terminal Expression variable;
non terminal Expression function_call;
non terminal Type type;
non terminal Type simple_type;

/* Precedencia */
precedence left ELSE;

/* Gramatica */
start with prog;

prog                        ::= PROGRAM:p IDENTIFIER:i arguments:a SEMICOLON block:b DOT
                            {:  RESULT = new Program(i, b, pxleft.getLine(), pxleft.getColumn()); :}
                            |   error:e
                            {:  RESULT = new ErrorProgram(exleft.getLine(), exleft.getColumn()); :}
                            ;

arguments                   ::= LPAREN argument_list:il RPAREN
                            {:  RESULT = il; :}
                            |   
                            {:  RESULT = new IdentifierList(); :}
                            ;

argument_list               ::= identifier_list:il
                            {:  RESULT = il; :}
                            |   
                            {:  RESULT = new IdentifierList(); :}
                            ;

identifier_list             ::= IDENTIFIER:i
                            {:  IdentifierList list = new IdentifierList();
                                list.add(new Identifier(i, ixleft.getLine(), ixleft.getColumn()));
                                RESULT = list;
                            :}
                            |   IDENTIFIER:i COMMA identifier_list:il
                            {:  il.add(new Identifier(i, ixleft.getLine(), ixleft.getColumn()));
                                RESULT = il;
                            :}
                            ;

block                       ::= declarations:dl compound_statement:s
                            {:  RESULT = new Block(dl, s, dlxleft.getLine(), dlxleft.getColumn()); :}
                            ;

declarations                ::= declaration:d declarations:dl
                            {:  dl.add(d);
                                RESULT = dl; :}
                            |   
                            {:  RESULT = new Declarations(); :}
                            ;

declaration                 ::= variable_declaration:vl
                            {:  RESULT = vl; :}
                            |   type_declaration:tl
                            {:  RESULT = tl; :}
                            |   procedure_declaration:p
                            {:  RESULT = p; :}
                            |   function_declaration:f
                            {:  RESULT = f; :}
                            |   error:e SEMICOLON
                            {:  RESULT = new ErrorDeclaration(exleft.getLine(), exleft.getColumn()); :}
                            ;

type_declaration            ::= TYPE:t type_definitions:tl
                            {:  RESULT = new TypeDeclaration(tl, txleft.getLine(), txleft.getColumn()); :}
                            ;

type_definitions            ::= type_definition:t SEMICOLON:s type_definitions:tl
                            {:  tl.add(t);
                                RESULT = tl; :}
                            |   type_definition:t SEMICOLON:s
                            {:  TypeDefinitions tl = new TypeDefinitions();
                                tl.add(t);
                                RESULT = tl; :}
                            ;

type_definition             ::= IDENTIFIER:i EQ:e record_type:fl
                            {:  RESULT = new TypeDefinition(new Identifier(i, ixleft.getLine(), ixleft.getColumn()), fl, ixleft.getLine(), ixleft.getColumn()); :}
                            ;

record_type                 ::= RECORD:r record_body:fl END:e
                            {:  RESULT = fl; :}
                            ;

record_body                 ::= field_list:fl
                            {:  RESULT = fl; :}
                            |   
                            {:  RESULT = new FieldList(); :}
                            ;

field_list                  ::= identifier_list:il COLON:c simple_type:t SEMICOLON field_list:fl
                            {:  fl.add(il, t);
                                RESULT = fl; :}
                            |   identifier_list:il COLON:c simple_type:t SEMICOLON 
                            {:  FieldList fl = new FieldList();
                                fl.add(il, t);
                                RESULT = fl; :}
                            ;

variable_declaration        ::= VAR:v variable_definitions:vl
                            {:  RESULT = new VariableDeclaration(vl, vxleft.getLine(), vxleft.getColumn()); :}
                            ;

variable_definitions        ::= variable_definition:v SEMICOLON:s
                            {:  RESULT = v;  :}
                            |   variable_definition:v SEMICOLON:s variable_definitions:vl
                            {:  vl.add(v);
                                RESULT = vl; :}
                            ;   

variable_definition         ::= identifier_list:il COLON:c type:t
                            {:  VariableDefinitions vl = new VariableDefinitions();
                                vl.add(il, t);
                                RESULT = vl; :}
                            ;

procedure_declaration       ::= PROCEDURE:p IDENTIFIER:i formal_parameters:pl SEMICOLON:s block:b SEMICOLON:s2
                            {:  RESULT = new ProcedureDeclaration("PROCEDURE", new Identifier(i, ixleft.getLine(), ixleft.getColumn()), pl, null, b, pxleft.getLine(), pxleft.getColumn()); :}
                            ;

function_declaration        ::= FUNCTION:p  IDENTIFIER:i formal_parameters:pl COLON type:t SEMICOLON:s block:b SEMICOLON:s2
                            {:  RESULT = new ProcedureDeclaration("FUNCTION", new Identifier(i, ixleft.getLine(), ixleft.getColumn()), pl, t, b, pxleft.getLine(), pxleft.getColumn()); :}
                            ;

formal_parameters           ::= LPAREN parameter_defs:pl RPAREN
                            {:  RESULT = pl; :}
                            |
                            {:  RESULT = new ParameterDefinitions(); :}
                            ;

parameter_defs              ::= parameter_def:p SEMICOLON parameter_defs:pl
                            {:  pl.add(p);
                                RESULT = pl; :}
                            |   parameter_def:pl
                            {:  RESULT = pl; :}
                            ;

parameter_def               ::= identifier_list:il COLON:c type:t
                            {:  ParameterDefinitions pl = new ParameterDefinitions();
                                pl.add(il, t);
                                RESULT = pl; :}
                            ;

statements                  ::= statement:s SEMICOLON statements:sl
                            {:  sl.add(s);
                                RESULT = sl; :}
                            |   statement:s
                            {:  Statements sl = new Statements(sxleft.getLine(), sxleft.getColumn());
                                if (s != null) {
                                    sl.add(s);
                                }
                                RESULT = sl; :}
                            ;

statement                   ::= assign_statement:s
                            {:  RESULT = s; :}
                            |   write_statement:s
                            {:  RESULT = s; :}
                            |   read_statement:s
                            {:  RESULT = s; :}
                            |   procedure_statement:s
                            {:  RESULT = s; :}
                            |   if_statement:s
                            {:  RESULT = s; :}
                            |   while_statement:s
                            {:  RESULT = s; :}
                            |   repeat_statement:s
                            {:  RESULT = s; :}
                            |   for_statement:s
                            {:  RESULT = s; :}
                            |   compound_statement:s
                            {:  RESULT = s; :}
                            |   empty_statement:s
                            {:  RESULT = s; :}
                            |   error:e
                            {:  RESULT = new ErrorStatement(exleft.getLine(), exleft.getColumn()); :}
                            ;

empty_statement             ::= 
                            {:  RESULT = null; :}
                            ;

compound_statement          ::= BEGIN:b statements:s END:e
                            {:  RESULT = s; :}
                            ;

write_statement             ::= WRITE:w LPAREN STRING_LITERAL:s opt_parameter:op RPAREN
                            {:  RESULT = new WriteStatement(s, op, wxleft.getLine(), wxleft.getColumn()); :}
                            ;

opt_parameter               ::= COMMA expression:e
                            {:  RESULT = e; :}
                            |   
                            {:  RESULT = null; :}
                            ;

read_statement              ::= READ:r LPAREN expression:e RPAREN
                            {:  RESULT = new ReadStatement(e, rxleft.getLine(), rxleft.getColumn()); :}
                            ;

assign_statement            ::= variable:v ASSIGN expression:e
                            {:  RESULT = new AssignStatement(v, e, vxleft.getLine(), vxleft.getColumn()); :}
                            ;

procedure_statement         ::= IDENTIFIER:i parameter_list:pl
                            {:  RESULT = new ProcedureStatement(new Identifier(i, ixleft.getLine(), ixleft.getColumn()), pl, ixleft.getLine(), ixleft.getColumn()); :}
                            ;

if_statement                ::= IF:i expression:e THEN statement:s
                            {:  RESULT = new IfStatement(e, s, null, ixleft.getLine(), ixleft.getColumn()); :}
                            |   IF:i expression:e THEN statement:s ELSE statement:els
                            {:  RESULT = new IfStatement(e, s, els, ixleft.getLine(), ixleft.getColumn()); :}
                            ;

while_statement             ::= WHILE:w expression:e DO statement:s
                            {:  RESULT = new WhileStatement(e, s, wxleft.getLine(), wxleft.getColumn()); :}
                            ;

repeat_statement            ::= REPEAT:r statements:s UNTIL expression:e
                            {:  RESULT = new RepeatStatement(e, s, rxleft.getLine(), rxleft.getColumn()); :}
                            ;

for_statement               ::= FOR:f IDENTIFIER:i ASSIGN expression:e1 TO expression:e2 DO statement:s
                            {:  RESULT = new ForStatement(new Identifier(i, ixleft.getLine(), ixleft.getColumn()), e1, e2, s, fxleft.getLine(), fxleft.getColumn()); :}
                            ;

parameter_list              ::= LPAREN parameters:p RPAREN
                            {:  RESULT = p; :}
                            |   
                            {:  RESULT = new Parameters(); :}
                            ;

opt_parameters              ::= parameters:pl
                            {:  RESULT = pl; :}
                            |   
                            {:  RESULT = new Parameters(); :}
                            ;

parameters                  ::= expression:e COMMA parameters:pl
                            {:  RESULT = pl; :}
                            |   expression:e
                            {:  Parameters pl = new Parameters();
                                pl.add(e);
                                RESULT = pl;  :}
                            ;

OPLOG                       ::= AND:t
                            {:  RESULT = t; :}
                            |   OR:t
                            {:  RESULT = t; :}
                            ;

OPREL                       ::= EQ:t
                            {:  RESULT = t; :}
                            |   NEQ:t
                            {:  RESULT = t; :}
                            |   LT:t
                            {:  RESULT = t; :}
                            |   GT:t
                            {:  RESULT = t; :}
                            |   LE:t
                            {:  RESULT = t; :}
                            |   GE:t
                            {:  RESULT = t; :}
                            ;

OPSUM                       ::= PLUS:t
                            {:  RESULT = t; :}
                            |   MINUS:t
                            {:  RESULT = t; :}
                            ;

OPMULT                      ::= MULT:t
                            {:  RESULT = t; :}
                            |   SLASH:t
                            {:  RESULT = t; :}
                            |   DIV:t
                            {:  RESULT = t; :}
                            |   MOD:t
                            {:  RESULT = t; :}
                            ;

expression                  ::= relation:r
                            {:  RESULT = r; :}
                            |   expression:e1 OPLOG:o relation:e2
                            {:  RESULT = new LogicalExpression(o, e1, e2, e1xleft.getLine(), e1xleft.getColumn()); :}
                            ;

relation                    ::= simple_expression:e
                            {:  RESULT = e; :}
                            |   relation:e1 OPREL:o simple_expression:e2
                            {:  RESULT = new AritmeticExpression(o, e1, e2, e1xleft.getLine(), e1xleft.getColumn()); :}
                            ;

simple_expression           ::= OPSUM:o term:t
                            {:  RESULT = new UnaryExpression(o, t, oxleft.getLine(), oxleft.getColumn()); :}
                            |   term:t
                            {:  RESULT = t; :}
                            |   simple_expression:e1 OPSUM:o term:e2
                            {:  RESULT = new AritmeticExpression(o, e1, e2, e1xleft.getLine(), e1xleft.getColumn()); :}
                            ;

term                        ::= factor:f
                            {:  RESULT = f; :}
                            |   term:e1 OPMULT:o factor:e2
                            {:  RESULT = new AritmeticExpression(o, e1, e2, e1xleft.getLine(), e1xleft.getColumn()); :}
                            ;

factor                      ::= primary:p
                            {:  RESULT = p; :}
                            |   NOT:n primary:p
                            {:  RESULT = new NotExpression(p, nxleft.getLine(), nxleft.getColumn()); :}
                            ;

primary                     ::= variable:v
                            {:  RESULT = v; :}
                            |   LPAREN expression:e RPAREN
                            {:  RESULT = e; :}
                            |   function_call:f
                            {:  RESULT = f; :}
                            |   INTEGER_LITERAL:i
                            {:  RESULT = new IntegerLiteral(i.intValue(), ixleft.getLine(), ixleft.getColumn()); :}
                            |   CHAR_LITERAL:s
                            {:  RESULT = new CharLiteral(s, sxleft.getLine(), sxleft.getColumn()); :}
                            |   TRUE:e
                            {:  RESULT = new True(exleft.getLine(), exleft.getColumn()); :}
                            |   FALSE:e
                            {:  RESULT = new False(exleft.getLine(), exleft.getColumn()); :}
                            |   error:e
                            {:  RESULT = new ErrorExpression(exleft.getLine(), exleft.getColumn()); :}
                            ;

variable                    ::= IDENTIFIER:i
                            {:  RESULT = new IdentifierExpression(new Identifier(i, ixleft.getLine(), ixleft.getColumn()), ixleft.getLine(), ixleft.getColumn()); :}
                            |   IDENTIFIER:i1 DOT IDENTIFIER:i2
                            {:  RESULT = new IdentifierExpression(new Identifier(i1, i1xleft.getLine(), i1xleft.getColumn()), new Identifier(i2, i2xleft.getLine(), i2xleft.getColumn()), i1xleft.getLine(), i1xleft.getColumn()); :}
                            ;

function_call               ::= IDENTIFIER:i LPAREN opt_parameters:p RPAREN
                            {:  RESULT = new CallExpression(new Identifier(i, ixleft.getLine(), ixleft.getColumn()), p, ixleft.getLine(), ixleft.getColumn()); :}
                            ;

type                        ::= IDENTIFIER:t
                            {:  RESULT = new IdentifierType(t, txleft.getLine(), txleft.getColumn()); :}
                            |   simple_type:t
                            {:  RESULT = t; :}
                            ;

simple_type                 ::= BOOLEAN:t
                            {:  RESULT = new BooleanType(txleft.getLine(), txleft.getColumn()); :}
                            |   CHAR:t
                            {:  RESULT = new CharType(txleft.getLine(), txleft.getColumn()); :}
                            |   INTEGER:t
                            {:  RESULT = new IntegerType(txleft.getLine(), txleft.getColumn()); :}
                            ;
